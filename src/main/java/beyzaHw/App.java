/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package beyzaHw;

import static spark.Spark.get;
import static spark.Spark.port;
import static spark.Spark.post;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;


import spark.ModelAndView;
import spark.template.mustache.MustacheTemplateEngine;


public class App
{
  public String getGreeting() {
      return "Hello world.";
  }

  public static boolean isItEqualAtX(ArrayList<Integer> arr1, ArrayList<Integer> arr2, int x){
    System.out.println("position confirmation");
    x--;
    
    if (arr1 == null || arr2 == null) return false;

    if(arr1.isEmpty() || arr2.isEmpty() ) return false;

    if(x < 0) throw new NullPointerException();
    if(x >= arr1.size() || x >= arr2.size() ) throw new NullPointerException();

    if(arr1.get(x).equals(arr2.get(x)) ) 
      return true;
    else 
      return false;
  }

  public static void main(String[] args) {
      port(getHerokuAssignedPort());

      get("/", (req, res) -> "Hello, World");

      post("/compute", (req, res) -> {
        //System.out.println(req.queryParams("input1"));
        //System.out.println(req.queryParams("input2"));

        String in1 = req.queryParams("input1");
        java.util.Scanner sc1 = new java.util.Scanner(in1);
        sc1.useDelimiter("[;\r\n]+");
        java.util.ArrayList<Integer> inputList = new java.util.ArrayList<>();
        while (sc1.hasNext())
        {
          int value = Integer.parseInt(sc1.next().replaceAll("\\s",""));
          inputList.add(value);
        }
        sc1.close();
        System.out.println(inputList);

        //input2 icin 
        String in2 = req.queryParams("input2");
        java.util.Scanner sc2 = new java.util.Scanner(in2);
        sc2.useDelimiter("[;\r\n]+");
        java.util.ArrayList<Integer> inputList2 = new java.util.ArrayList<>();
        while (sc2.hasNext())
        {
          int value = Integer.parseInt(sc2.next().replaceAll("\\s",""));
          inputList2.add(value);
        }
        sc2.close();
        System.out.println(inputList2);


        String in3 = req.queryParams("input3").replaceAll("\\s","");
        int input3AsInt = Integer.parseInt(in3);

        boolean result = App.isItEqualAtX(inputList, inputList2 ,input3AsInt); 

        Map<String, Boolean> map = new HashMap<String, Boolean>();
        map.put("result", result);
        return new ModelAndView(map, "compute.mustache");
      }, new MustacheTemplateEngine());


      get("/compute",
          (rq, rs) -> {
            Map<String, String> map = new HashMap<String, String>();
            map.put("In the first form,", "enter a list of integer that you want to compare index x with second array");
            map.put("In the second form,", "enter a list of integer that you want to compare index x with first array");
            map.put("In the third form,", "enter a integer. This integer will be used as an index ");
            map.put("If the first[x] and  second[x] are equals,", "it should return true, otherwise should return false.");

            map.put("result", "not computed yet!");
            return new ModelAndView(map, "compute.mustache");
          },
          new MustacheTemplateEngine());
  }

  static int getHerokuAssignedPort() {
      ProcessBuilder processBuilder = new ProcessBuilder();
      if (processBuilder.environment().get("PORT") != null) {
          return Integer.parseInt(processBuilder.environment().get("PORT"));
      }
      return 4569; //return default port if heroku-port isn't set (i.e. on localhost)
  }
}